Confinement 
    When working with concurrent code, there are a few different options for safe operation
        1) Synchronization primitites for sharing memory (sync.Mutex)
        2) Synchronization via communicating (channels)
    
    However, there are a couple of other options that are implicitly safe within multiple concurrent processes:
        1) Immutable data 
        2) Data protected by confinement
    
    - In some sense, immutable data is idea because it is implicitly concurrent safe 
    - Each concurrent tprocess may operatoe on the same data, but may not modify it 
    - If it wants to create new data, it must create a new copy of the data with the desired modifications 
        -> This allows a lighter congnitive load on the developer, but can also lead to faster programs if it leads to
            smaller critical sections 
        -> In go you can achieve this by writing code that utilizes copies of values instead of pointers to values in memory 
        -> Some languages support use of pointers with explicitly immutable values, however Go is not one of these 

    * Bascially, Go uses copy by value, instead of by reference, which leads to more thread safe code, since data being changed 
        is not shared with other concurrent funcitons, bascaiiyl leaves the original data immutable 
    
    - Confinement is the simple yet powerful idea of ensuring information is only ever avialbe from one concurrent process 
    - When this is achieved, a concurrent program is implicitly safe, and no synchronisation is needed 
