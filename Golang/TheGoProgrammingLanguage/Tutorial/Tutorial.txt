- Go is a compiled language
    -> $ go run main.go
    ^ This compiles the source code from .go files, links it with libraries, then runs the resulting executable file 
    -> $ go build main.go
    ^ This creates an executable binary file called helloworld, that can be run anytime without futher processing 

- Go is organised into packages, which are similar to loibraries or modules in other languages
    -> Each source file needs a pakcage declaration 
    -> package main is special, it defines a standalone executable program, not a library. 
        -> func main is special inside package main, whatever main does is what the program does 

- Go takes a steorng stance on code formatting. The gofmt tool reqries code into the standard format, and the go tool's fmt subcommand applies
    gofmt to all the files in a specified package, or the ones in the current directory by default 

1.2 Command Line Arguments
    - The OS package provides functions and other values for dealing with the operating system in the platform-independent fashion 
    - os.Args geets command-line Arguments
        -> It gives a slice of strings 
        -> Slices:
            - fundamental notion in go, think of them like a dynamically sized sequence of array elements 
        -> First element of os.Args is teh anme of the command itself 
        -> os.Args[1:len(os.Args)] would get all the other input elements 
    - The blank identifier
        $ _
        -> The blank identifier may be used, whenever a function returns a variable that is not used
            -> Whenever sytax requires a variable name, but program logic does not 
    - Variable Declarations
        
        1) $ s := ""
        2) $ var s string 
        3) $ var s = ""
        4) $ var s string = ""
        
        When should you prefer one over the other?
            1) Use this only when within a functino, not suitable for package-level variables
            2) This relies on default initalisaino to the zero value for strings, which is ""
            3) For decalring multiple values 
            4) Redundantly explicit 

            You should only really use 1 or 2 

1.3 Finding Duplicate Lines
    - A map holds a set of key/value paits and provides constant-time operations to store, retrieve, or test for an item in the set
    - The key may be of any type whose valyes can be compared with --, strings being the most common example 

1.4 Animated Gifs 
    - 

1.5 Fetching URLs
    - Go provides a collection of packages, grouped under "net", that make it easy to send and receive informatino through the internet
        make low level network connections, and setup servers for which Go's concurrency features are particualry useful
    - The body field of resp contains a readable stream







